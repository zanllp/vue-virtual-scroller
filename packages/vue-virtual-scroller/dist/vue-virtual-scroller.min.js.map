{"version":3,"file":"vue-virtual-scroller.min.js","sources":["../src/config.js","../node_modules/vue-resize/dist/vue-resize.esm.js","../node_modules/vue-observe-visibility/dist/vue-observe-visibility.esm.js","../src/scrollparent.js","../src/components/common.js","../src/utils.js","../src/components/RecycleScroller.vue","../src/components/RecycleScroller.vue?vue&type=template&id=093a936d&lang.js","../src/components/DynamicScroller.vue","../node_modules/mitt/dist/mitt.es.js","../src/components/DynamicScroller.vue?vue&type=template&id=76e15f19&lang.js","../src/components/DynamicScrollerItem.vue","../src/index.js","../src/mixins/IdState.js"],"sourcesContent":["export default {\n  itemsLimit: 1000,\n}\n","import { nextTick, pushScopeId, popScopeId, openBlock, createBlock, withScopeId } from 'vue';\n\nfunction getInternetExplorerVersion() {\n  var ua = window.navigator.userAgent;\n  var msie = ua.indexOf('MSIE ');\n\n  if (msie > 0) {\n    // IE 10 or older => return version number\n    return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n  }\n\n  var trident = ua.indexOf('Trident/');\n\n  if (trident > 0) {\n    // IE 11 => return version number\n    var rv = ua.indexOf('rv:');\n    return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n  }\n\n  var edge = ua.indexOf('Edge/');\n\n  if (edge > 0) {\n    // Edge (IE 12+) => return version number\n    return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n  } // other browser\n\n\n  return -1;\n}\n\nlet isIE;\n\nfunction initCompat () {\n  if (!initCompat.init) {\n    initCompat.init = true;\n    isIE = getInternetExplorerVersion() !== -1;\n  }\n}\n\nvar script = {\n  name: 'ResizeObserver',\n\n  props: {\n    emitOnMount: {\n      type: Boolean,\n      default: false,\n    },\n\n    ignoreWidth: {\n      type: Boolean,\n      default: false,\n    },\n\n    ignoreHeight: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  emits: [\n    'notify',\n  ],\n\n  mounted () {\n    initCompat();\n    nextTick(() => {\n      this._w = this.$el.offsetWidth;\n      this._h = this.$el.offsetHeight;\n      if (this.emitOnMount) {\n        this.emitSize();\n      }\n    });\n    const object = document.createElement('object');\n    this._resizeObject = object;\n    object.setAttribute('aria-hidden', 'true');\n    object.setAttribute('tabindex', -1);\n    object.onload = this.addResizeHandlers;\n    object.type = 'text/html';\n    if (isIE) {\n      this.$el.appendChild(object);\n    }\n    object.data = 'about:blank';\n    if (!isIE) {\n      this.$el.appendChild(object);\n    }\n  },\n\n  beforeUnmount () {\n    this.removeResizeHandlers();\n  },\n\n  methods: {\n    compareAndNotify () {\n      if ((!this.ignoreWidth && this._w !== this.$el.offsetWidth) || (!this.ignoreHeight && this._h !== this.$el.offsetHeight)) {\n        this._w = this.$el.offsetWidth;\n        this._h = this.$el.offsetHeight;\n        this.emitSize();\n      }\n    },\n\n    emitSize () {\n      this.$emit('notify', {\n        width: this._w,\n        height: this._h,\n      });\n    },\n\n    addResizeHandlers () {\n      this._resizeObject.contentDocument.defaultView.addEventListener('resize', this.compareAndNotify);\n      this.compareAndNotify();\n    },\n\n    removeResizeHandlers () {\n      if (this._resizeObject && this._resizeObject.onload) {\n        if (!isIE && this._resizeObject.contentDocument) {\n          this._resizeObject.contentDocument.defaultView.removeEventListener('resize', this.compareAndNotify);\n        }\n        this.$el.removeChild(this._resizeObject);\n        this._resizeObject.onload = null;\n        this._resizeObject = null;\n      }\n    },\n  },\n};\n\nconst _withId = /*#__PURE__*/withScopeId(\"data-v-b329ee4c\");\n\npushScopeId(\"data-v-b329ee4c\");\nconst _hoisted_1 = {\n  class: \"resize-observer\",\n  tabindex: \"-1\"\n};\npopScopeId();\n\nconst render = /*#__PURE__*/_withId((_ctx, _cache, $props, $setup, $data, $options) => {\n  return (openBlock(), createBlock(\"div\", _hoisted_1))\n});\n\nscript.render = render;\nscript.__scopeId = \"data-v-b329ee4c\";\nscript.__file = \"src/components/ResizeObserver.vue\";\n\nfunction install(app) {\n  // eslint-disable-next-line vue/component-definition-name-casing\n  app.component('resize-observer', script);\n  app.component('ResizeObserver', script);\n}\n\nvar plugin = {\n  // eslint-disable-next-line no-undef\n  version: \"2.0.0-alpha.1\",\n  install: install\n};\n\nexport default plugin;\nexport { script as ResizeObserver, install };\n//# sourceMappingURL=vue-resize.esm.js.map\n","import { nextTick } from 'vue';\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction processOptions(value) {\n  var options;\n\n  if (typeof value === 'function') {\n    // Simple options (callback-only)\n    options = {\n      callback: value\n    };\n  } else {\n    // Options object\n    options = value;\n  }\n\n  return options;\n}\nfunction throttle(callback, delay) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var timeout;\n  var lastState;\n  var currentArgs;\n\n  var throttled = function throttled(state) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    currentArgs = args;\n    if (timeout && state === lastState) return;\n    var leading = options.leading;\n\n    if (typeof leading === 'function') {\n      leading = leading(state, lastState);\n    }\n\n    if ((!timeout || state !== lastState) && leading) {\n      callback.apply(void 0, [state].concat(_toConsumableArray(currentArgs)));\n    }\n\n    lastState = state;\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      callback.apply(void 0, [state].concat(_toConsumableArray(currentArgs)));\n      timeout = 0;\n    }, delay);\n  };\n\n  throttled._clear = function () {\n    clearTimeout(timeout);\n    timeout = null;\n  };\n\n  return throttled;\n}\nfunction deepEqual(val1, val2) {\n  if (val1 === val2) return true;\n\n  if (_typeof(val1) === 'object') {\n    for (var key in val1) {\n      if (!deepEqual(val1[key], val2[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nvar VisibilityState = /*#__PURE__*/function () {\n  function VisibilityState(el, options, vnode) {\n    _classCallCheck(this, VisibilityState);\n\n    this.el = el;\n    this.observer = null;\n    this.frozen = false;\n    this.createObserver(options, vnode);\n  }\n\n  _createClass(VisibilityState, [{\n    key: \"createObserver\",\n    value: function createObserver(options, vnode) {\n      var _this = this;\n\n      if (this.observer) {\n        this.destroyObserver();\n      }\n\n      if (this.frozen) return;\n      this.options = processOptions(options);\n\n      this.callback = function (result, entry) {\n        _this.options.callback(result, entry);\n\n        if (result && _this.options.once) {\n          _this.frozen = true;\n\n          _this.destroyObserver();\n        }\n      }; // Throttle\n\n\n      if (this.callback && this.options.throttle) {\n        var _ref = this.options.throttleOptions || {},\n            _leading = _ref.leading;\n\n        this.callback = throttle(this.callback, this.options.throttle, {\n          leading: function leading(state) {\n            return _leading === 'both' || _leading === 'visible' && state || _leading === 'hidden' && !state;\n          }\n        });\n      }\n\n      this.oldResult = undefined;\n      this.observer = new IntersectionObserver(function (entries) {\n        var entry = entries[0];\n\n        if (entries.length > 1) {\n          var intersectingEntry = entries.find(function (e) {\n            return e.isIntersecting;\n          });\n\n          if (intersectingEntry) {\n            entry = intersectingEntry;\n          }\n        }\n\n        if (_this.callback) {\n          // Use isIntersecting if possible because browsers can report isIntersecting as true, but intersectionRatio as 0, when something very slowly enters the viewport.\n          var result = entry.isIntersecting && entry.intersectionRatio >= _this.threshold;\n          if (result === _this.oldResult) return;\n          _this.oldResult = result;\n\n          _this.callback(result, entry);\n        }\n      }, this.options.intersection); // Wait for the element to be in document\n\n      nextTick(function () {\n        if (_this.observer) {\n          _this.observer.observe(_this.el);\n        }\n      });\n    }\n  }, {\n    key: \"destroyObserver\",\n    value: function destroyObserver() {\n      if (this.observer) {\n        this.observer.disconnect();\n        this.observer = null;\n      } // Cancel throttled call\n\n\n      if (this.callback && this.callback._clear) {\n        this.callback._clear();\n\n        this.callback = null;\n      }\n    }\n  }, {\n    key: \"threshold\",\n    get: function get() {\n      return this.options.intersection && typeof this.options.intersection.threshold === 'number' ? this.options.intersection.threshold : 0;\n    }\n  }]);\n\n  return VisibilityState;\n}();\n\nfunction beforeMount(el, _ref2, vnode) {\n  var value = _ref2.value;\n  if (!value) return;\n\n  if (typeof IntersectionObserver === 'undefined') {\n    console.warn('[vue-observe-visibility] IntersectionObserver API is not available in your browser. Please install this polyfill: https://github.com/w3c/IntersectionObserver/tree/master/polyfill');\n  } else {\n    var state = new VisibilityState(el, value, vnode);\n    el._vue_visibilityState = state;\n  }\n}\n\nfunction updated(el, _ref3, vnode) {\n  var value = _ref3.value,\n      oldValue = _ref3.oldValue;\n  if (deepEqual(value, oldValue)) return;\n  var state = el._vue_visibilityState;\n\n  if (!value) {\n    unmounted(el);\n    return;\n  }\n\n  if (state) {\n    state.createObserver(value, vnode);\n  } else {\n    beforeMount(el, {\n      value: value\n    }, vnode);\n  }\n}\n\nfunction unmounted(el) {\n  var state = el._vue_visibilityState;\n\n  if (state) {\n    state.destroyObserver();\n    delete el._vue_visibilityState;\n  }\n}\n\nvar ObserveVisibility = {\n  beforeMount: beforeMount,\n  updated: updated,\n  unmounted: unmounted\n};\n\nfunction install(app) {\n  app.directive('observe-visibility', ObserveVisibility);\n  /* -- Add more components here -- */\n}\n/* -- Plugin definition & Auto-install -- */\n\n/* You shouldn't have to modify the code below */\n// Plugin\n\nvar plugin = {\n  // eslint-disable-next-line no-undef\n  version: \"2.0.0-alpha.1\",\n  install: install\n};\n\nexport default plugin;\nexport { ObserveVisibility, install };\n","// Fork of https://github.com/olahol/scrollparent.js to be able to build with Rollup\n\nconst regex = /(auto|scroll)/\n\nfunction parents (node, ps) {\n  if (node.parentNode === null) { return ps }\n\n  return parents(node.parentNode, ps.concat([node]))\n}\n\nconst style = function (node, prop) {\n  return getComputedStyle(node, null).getPropertyValue(prop)\n}\n\nconst overflow = function (node) {\n  return style(node, 'overflow') + style(node, 'overflow-y') + style(node, 'overflow-x')\n}\n\nconst scroll = function (node) {\n  return regex.test(overflow(node))\n}\n\nexport function getScrollParent (node) {\n  if (!(node instanceof HTMLElement || node instanceof SVGElement)) {\n    return\n  }\n\n  const ps = parents(node.parentNode, [])\n\n  for (let i = 0; i < ps.length; i += 1) {\n    if (scroll(ps[i])) {\n      return ps[i]\n    }\n  }\n\n  return document.scrollingElement || document.documentElement\n}\n","export const props = {\n  items: {\n    type: Array,\n    required: true,\n  },\n\n  keyField: {\n    type: String,\n    default: 'id',\n  },\n\n  direction: {\n    type: String,\n    default: 'vertical',\n    validator: (value) => ['vertical', 'horizontal'].includes(value),\n  },\n\n  listTag: {\n    type: String,\n    default: 'div',\n  },\n\n  itemTag: {\n    type: String,\n    default: 'div',\n  },\n}\n\nexport function simpleArray () {\n  return this.items.length && typeof this.items[0] !== 'object'\n}\n","export let supportsPassive = false\n\nif (typeof window !== 'undefined') {\n  supportsPassive = false\n  try {\n    const opts = Object.defineProperty({}, 'passive', {\n      get () {\n        supportsPassive = true\n      },\n    })\n    window.addEventListener('test', null, opts)\n  } catch (e) {}\n}\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      ref=\"before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <component\n      :is=\"listTag\"\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n      :class=\"listClass\"\n    >\n      <component\n        :is=\"itemTag\"\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? {\n          transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px) translate${direction === 'vertical' ? 'X' : 'Y'}(${view.offset}px)`,\n          width: gridItems ? `${direction === 'vertical' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\n          height: gridItems ? `${direction === 'horizontal' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\n        } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"[\n          itemClass,\n          {\n            hover: !skipHover && hoverKey === view.nr.key\n          },\n        ]\"\n        v-on=\"skipHover ? {} : {\n          mouseenter: () => { hoverKey = view.nr.key },\n          mouseleave: () => { hoverKey = null },\n        }\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </component>\n\n      <slot\n        name=\"empty\"\n      />\n    </component>\n\n    <div\n      v-if=\"$slots.after\"\n      ref=\"after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { shallowReactive, markRaw } from 'vue'\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport { getScrollParent } from '../scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    gridItems: {\n      type: Number,\n      default: undefined,\n    },\n\n    itemSecondarySize: {\n      type: Number,\n      default: undefined,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n\n    updateInterval: {\n      type: Number,\n      default: 0,\n    },\n\n    skipHover: {\n      type: Boolean,\n      default: false,\n    },\n\n    listTag: {\n      type: String,\n      default: 'div',\n    },\n\n    itemTag: {\n      type: String,\n      default: 'div',\n    },\n\n    listClass: {\n      type: [String, Object, Array],\n      default: '',\n    },\n\n    itemClass: {\n      type: [String, Object, Array],\n      default: '',\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n    'hidden',\n    'update',\n    'scroll-start',\n    'scroll-end',\n  ],\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n\n    itemIndexByKey () {\n      const { keyField, items } = this\n      const result = {}\n      for (let i = 0, l = items.length; i < l; i++) {\n        result[items[i][keyField]] = i\n      }\n      return result\n    },\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n\n    gridItems () {\n      this.updateVisibleItems(true)\n    },\n\n    itemSecondarySize () {\n      this.updateVisibleItems(true)\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n\n    if (this.gridItems && !this.itemSize) {\n      console.error('[vue-recycle-scroller] You must provide an itemSize when using gridItems')\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  activated () {\n    const lastPosition = this.$_lastUpdateScrollPosition\n    if (typeof lastPosition === 'number') {\n      this.$nextTick(() => {\n        this.scrollToPosition(lastPosition)\n      })\n    }\n  },\n\n  beforeUnmount () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const nr = markRaw({\n        id: uid++,\n        index,\n        used: true,\n        key,\n        type,\n      })\n      const view = shallowReactive({\n        item,\n        position: 0,\n        nr,\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        if (this.$_updateTimeout) return\n\n        const requestUpdate = () => requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, this.updateInterval + 100)\n          }\n        })\n\n        requestUpdate()\n\n        // Schedule the next update with throttling\n        if (this.updateInterval) {\n          this.$_updateTimeout = setTimeout(() => {\n            this.$_updateTimeout = 0\n            if (this.$_scrollDirty) requestUpdate()\n          }, this.updateInterval)\n        }\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const gridItems = this.gridItems || 1\n      const itemSecondarySize = this.itemSecondarySize || itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      const itemIndexByKey = this.itemIndexByKey\n      let startIndex, endIndex\n      let totalSize\n      let visibleStartIndex, visibleEndIndex\n\n      if (!count) {\n        startIndex = endIndex = visibleStartIndex = visibleEndIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = visibleStartIndex = 0\n        endIndex = visibleEndIndex = Math.min(this.prerender, items.length)\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // account for leading slot\n        let beforeSize = 0\n        if (this.$refs.before) {\n          beforeSize = this.$refs.before.scrollHeight\n          scroll.start -= beforeSize\n        }\n\n        // account for trailing slot\n        if (this.$refs.after) {\n          const afterSize = this.$refs.after.scrollHeight\n          scroll.end += afterSize\n        }\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n\n          // search visible startIndex\n          for (visibleStartIndex = startIndex; visibleStartIndex < count && (beforeSize + sizes[visibleStartIndex].accumulator) < scroll.start; visibleStartIndex++);\n\n          // search visible endIndex\n          for (visibleEndIndex = visibleStartIndex; visibleEndIndex < count && (beforeSize + sizes[visibleEndIndex].accumulator) < scroll.end; visibleEndIndex++);\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize * gridItems)\n          const remainer = startIndex % gridItems\n          startIndex -= remainer\n          endIndex = Math.ceil(scroll.end / itemSize * gridItems)\n          visibleStartIndex = Math.max(0, Math.floor((scroll.start - beforeSize) / itemSize * gridItems))\n          visibleEndIndex = Math.floor((scroll.end - beforeSize) / itemSize * gridItems)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n          visibleStartIndex < 0 && (visibleStartIndex = 0)\n          visibleEndIndex > count && (visibleEndIndex = count)\n\n          totalSize = Math.ceil(count / gridItems) * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      // Unuse views that are no longer visible\n      if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = itemIndexByKey[view.item[keyField]]\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index == null ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        type = item[typeField]\n\n        let unusedPool = unusedViews.get(type)\n        let newlyUsedView = false\n\n        // No view assigned to item\n        if (!view) {\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            unusedIndex.set(type, v + 1)\n          }\n\n          // Assign view to item\n          views.delete(view.nr.key)\n          view.nr.used = true\n          view.nr.index = i\n          view.nr.key = key\n          view.nr.type = type\n          views.set(key, view)\n\n          newlyUsedView = true\n        } else {\n          // View already assigned to item\n          if (!view.nr.used) {\n            view.nr.used = true\n            view.nr.index = i\n            newlyUsedView = true\n            if (unusedPool) {\n              const index = unusedPool.indexOf(view)\n              if (index !== -1) unusedPool.splice(index, 1)\n            }\n          }\n        }\n\n        // Always set item in case it's a new object with the same key\n        view.item = item\n\n        if (newlyUsedView) {\n          if (i === items.length - 1) this.$emit('scroll-end')\n          if (i === 0) this.$emit('scroll-start')\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n          view.offset = 0\n        } else {\n          view.position = Math.floor(i / gridItems) * itemSize\n          view.offset = (i % gridItems) * itemSecondarySize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex, visibleStartIndex, visibleEndIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, this.updateInterval + 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = getScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive\n        ? {\n            passive: true,\n          }\n        : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      const gridItems = this.gridItems || 1\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = Math.floor(index / gridItems) * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      const direction = this.direction === 'vertical'\n        ? { scroll: 'scrollTop', start: 'top' }\n        : { scroll: 'scrollLeft', start: 'left' }\n\n      let viewport\n      let scrollDirection\n      let scrollDistance\n\n      if (this.pageMode) {\n        const viewportEl = getScrollParent(this.$el)\n        // HTML doesn't overflow like other elements\n        const scrollTop = viewportEl.tagName === 'HTML' ? 0 : viewportEl[direction.scroll]\n        const bounds = viewportEl.getBoundingClientRect()\n\n        const scroller = this.$el.getBoundingClientRect()\n        const scrollerPosition = scroller[direction.start] - bounds[direction.start]\n\n        viewport = viewportEl\n        scrollDirection = direction.scroll\n        scrollDistance = position + scrollTop + scrollerPosition\n      } else {\n        viewport = this.$el\n        scrollDirection = direction.scroll\n        scrollDistance = position\n      }\n\n      viewport[scrollDirection] = scrollDistance\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      ref=\"before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <component\n      :is=\"listTag\"\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n      :class=\"listClass\"\n    >\n      <component\n        :is=\"itemTag\"\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? {\n          transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px) translate${direction === 'vertical' ? 'X' : 'Y'}(${view.offset}px)`,\n          width: gridItems ? `${direction === 'vertical' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\n          height: gridItems ? `${direction === 'horizontal' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\n        } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"[\n          itemClass,\n          {\n            hover: !skipHover && hoverKey === view.nr.key\n          },\n        ]\"\n        v-on=\"skipHover ? {} : {\n          mouseenter: () => { hoverKey = view.nr.key },\n          mouseleave: () => { hoverKey = null },\n        }\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </component>\n\n      <slot\n        name=\"empty\"\n      />\n    </component>\n\n    <div\n      v-if=\"$slots.after\"\n      ref=\"after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { shallowReactive, markRaw } from 'vue'\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport { getScrollParent } from '../scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    gridItems: {\n      type: Number,\n      default: undefined,\n    },\n\n    itemSecondarySize: {\n      type: Number,\n      default: undefined,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n\n    updateInterval: {\n      type: Number,\n      default: 0,\n    },\n\n    skipHover: {\n      type: Boolean,\n      default: false,\n    },\n\n    listTag: {\n      type: String,\n      default: 'div',\n    },\n\n    itemTag: {\n      type: String,\n      default: 'div',\n    },\n\n    listClass: {\n      type: [String, Object, Array],\n      default: '',\n    },\n\n    itemClass: {\n      type: [String, Object, Array],\n      default: '',\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n    'hidden',\n    'update',\n    'scroll-start',\n    'scroll-end',\n  ],\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n\n    itemIndexByKey () {\n      const { keyField, items } = this\n      const result = {}\n      for (let i = 0, l = items.length; i < l; i++) {\n        result[items[i][keyField]] = i\n      }\n      return result\n    },\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n\n    gridItems () {\n      this.updateVisibleItems(true)\n    },\n\n    itemSecondarySize () {\n      this.updateVisibleItems(true)\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n\n    if (this.gridItems && !this.itemSize) {\n      console.error('[vue-recycle-scroller] You must provide an itemSize when using gridItems')\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  activated () {\n    const lastPosition = this.$_lastUpdateScrollPosition\n    if (typeof lastPosition === 'number') {\n      this.$nextTick(() => {\n        this.scrollToPosition(lastPosition)\n      })\n    }\n  },\n\n  beforeUnmount () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const nr = markRaw({\n        id: uid++,\n        index,\n        used: true,\n        key,\n        type,\n      })\n      const view = shallowReactive({\n        item,\n        position: 0,\n        nr,\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        if (this.$_updateTimeout) return\n\n        const requestUpdate = () => requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, this.updateInterval + 100)\n          }\n        })\n\n        requestUpdate()\n\n        // Schedule the next update with throttling\n        if (this.updateInterval) {\n          this.$_updateTimeout = setTimeout(() => {\n            this.$_updateTimeout = 0\n            if (this.$_scrollDirty) requestUpdate()\n          }, this.updateInterval)\n        }\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const gridItems = this.gridItems || 1\n      const itemSecondarySize = this.itemSecondarySize || itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      const itemIndexByKey = this.itemIndexByKey\n      let startIndex, endIndex\n      let totalSize\n      let visibleStartIndex, visibleEndIndex\n\n      if (!count) {\n        startIndex = endIndex = visibleStartIndex = visibleEndIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = visibleStartIndex = 0\n        endIndex = visibleEndIndex = Math.min(this.prerender, items.length)\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // account for leading slot\n        let beforeSize = 0\n        if (this.$refs.before) {\n          beforeSize = this.$refs.before.scrollHeight\n          scroll.start -= beforeSize\n        }\n\n        // account for trailing slot\n        if (this.$refs.after) {\n          const afterSize = this.$refs.after.scrollHeight\n          scroll.end += afterSize\n        }\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n\n          // search visible startIndex\n          for (visibleStartIndex = startIndex; visibleStartIndex < count && (beforeSize + sizes[visibleStartIndex].accumulator) < scroll.start; visibleStartIndex++);\n\n          // search visible endIndex\n          for (visibleEndIndex = visibleStartIndex; visibleEndIndex < count && (beforeSize + sizes[visibleEndIndex].accumulator) < scroll.end; visibleEndIndex++);\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize * gridItems)\n          const remainer = startIndex % gridItems\n          startIndex -= remainer\n          endIndex = Math.ceil(scroll.end / itemSize * gridItems)\n          visibleStartIndex = Math.max(0, Math.floor((scroll.start - beforeSize) / itemSize * gridItems))\n          visibleEndIndex = Math.floor((scroll.end - beforeSize) / itemSize * gridItems)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n          visibleStartIndex < 0 && (visibleStartIndex = 0)\n          visibleEndIndex > count && (visibleEndIndex = count)\n\n          totalSize = Math.ceil(count / gridItems) * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      // Unuse views that are no longer visible\n      if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = itemIndexByKey[view.item[keyField]]\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index == null ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        type = item[typeField]\n\n        let unusedPool = unusedViews.get(type)\n        let newlyUsedView = false\n\n        // No view assigned to item\n        if (!view) {\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            unusedIndex.set(type, v + 1)\n          }\n\n          // Assign view to item\n          views.delete(view.nr.key)\n          view.nr.used = true\n          view.nr.index = i\n          view.nr.key = key\n          view.nr.type = type\n          views.set(key, view)\n\n          newlyUsedView = true\n        } else {\n          // View already assigned to item\n          if (!view.nr.used) {\n            view.nr.used = true\n            view.nr.index = i\n            newlyUsedView = true\n            if (unusedPool) {\n              const index = unusedPool.indexOf(view)\n              if (index !== -1) unusedPool.splice(index, 1)\n            }\n          }\n        }\n\n        // Always set item in case it's a new object with the same key\n        view.item = item\n\n        if (newlyUsedView) {\n          if (i === items.length - 1) this.$emit('scroll-end')\n          if (i === 0) this.$emit('scroll-start')\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n          view.offset = 0\n        } else {\n          view.position = Math.floor(i / gridItems) * itemSize\n          view.offset = (i % gridItems) * itemSecondarySize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex, visibleStartIndex, visibleEndIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, this.updateInterval + 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = getScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive\n        ? {\n            passive: true,\n          }\n        : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      const gridItems = this.gridItems || 1\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = Math.floor(index / gridItems) * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      const direction = this.direction === 'vertical'\n        ? { scroll: 'scrollTop', start: 'top' }\n        : { scroll: 'scrollLeft', start: 'left' }\n\n      let viewport\n      let scrollDirection\n      let scrollDistance\n\n      if (this.pageMode) {\n        const viewportEl = getScrollParent(this.$el)\n        // HTML doesn't overflow like other elements\n        const scrollTop = viewportEl.tagName === 'HTML' ? 0 : viewportEl[direction.scroll]\n        const bounds = viewportEl.getBoundingClientRect()\n\n        const scroller = this.$el.getBoundingClientRect()\n        const scrollerPosition = scroller[direction.start] - bounds[direction.start]\n\n        viewport = viewportEl\n        scrollDirection = direction.scroll\n        scrollDistance = position + scrollTop + scrollerPosition\n      } else {\n        viewport = this.$el\n        scrollDirection = direction.scroll\n        scrollDistance = position\n      }\n\n      viewport[scrollDirection] = scrollDistance\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    :list-tag=\"listTag\"\n    :item-tag=\"itemTag\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n  >\n    <template #default=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template #before>\n      <slot name=\"before\" />\n    </template>\n    <template #after>\n      <slot name=\"after\" />\n    </template>\n    <template #empty>\n      <slot name=\"empty\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport mitt from 'mitt'\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        requestAnimationFrame(() => {\n          if (!Array.isArray(entries)) {\n            return\n          }\n          for (const entry of entries) {\n            if (entry.target && entry.target.$_vs_onResize) {\n              const resizeObserverSize = entry.borderBoxSize[0]\n              entry.target.$_vs_onResize(entry.target.$_vs_id, resizeObserverSize.inlineSize, resizeObserverSize.blockSize)\n            }\n          }\n        })\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n  ],\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      const l = items.length\n      for (let i = 0; i < l; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate()\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n\n    itemsWithSize (next, prev) {\n      const scrollTop = this.$el.scrollTop\n\n      // Calculate total diff between prev and next sizes\n      // over current scroll top. Then add it to scrollTop to\n      // avoid jumping the contents that the user is seeing.\n      let prevActiveTop = 0; let activeTop = 0\n      const length = Math.min(next.length, prev.length)\n      for (let i = 0; i < length; i++) {\n        if (prevActiveTop >= scrollTop) {\n          break\n        }\n        prevActiveTop += prev[i].size || this.minItemSize\n        activeTop += next[i].size || this.minItemSize\n      }\n      const offset = activeTop - prevActiveTop\n\n      if (offset === 0) {\n        return\n      }\n\n      this.$el.scrollTop += offset\n    },\n  },\n\n  beforeCreate () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n    this.$_events = mitt()\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  unmounted () {\n    this.$_events.all.clear()\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$_events.emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = false) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.sizes = {}\n      }\n      this.$_events.emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","export default function(n){return{all:n=n||new Map,on:function(t,e){var i=n.get(t);i&&i.push(e)||n.set(t,[e])},off:function(t,e){var i=n.get(t);i&&i.splice(i.indexOf(e)>>>0,1)},emit:function(t,e){(n.get(t)||[]).slice().map(function(n){n(e)}),(n.get(\"*\")||[]).slice().map(function(n){n(t,e)})}}}\n//# sourceMappingURL=mitt.es.js.map\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    :list-tag=\"listTag\"\n    :item-tag=\"itemTag\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n  >\n    <template #default=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template #before>\n      <slot name=\"before\" />\n    </template>\n    <template #after>\n      <slot name=\"after\" />\n    </template>\n    <template #empty>\n      <slot name=\"empty\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport mitt from 'mitt'\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        requestAnimationFrame(() => {\n          if (!Array.isArray(entries)) {\n            return\n          }\n          for (const entry of entries) {\n            if (entry.target && entry.target.$_vs_onResize) {\n              const resizeObserverSize = entry.borderBoxSize[0]\n              entry.target.$_vs_onResize(entry.target.$_vs_id, resizeObserverSize.inlineSize, resizeObserverSize.blockSize)\n            }\n          }\n        })\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n  ],\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      const l = items.length\n      for (let i = 0; i < l; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate()\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n\n    itemsWithSize (next, prev) {\n      const scrollTop = this.$el.scrollTop\n\n      // Calculate total diff between prev and next sizes\n      // over current scroll top. Then add it to scrollTop to\n      // avoid jumping the contents that the user is seeing.\n      let prevActiveTop = 0; let activeTop = 0\n      const length = Math.min(next.length, prev.length)\n      for (let i = 0; i < length; i++) {\n        if (prevActiveTop >= scrollTop) {\n          break\n        }\n        prevActiveTop += prev[i].size || this.minItemSize\n        activeTop += next[i].size || this.minItemSize\n      }\n      const offset = activeTop - prevActiveTop\n\n      if (offset === 0) {\n        return\n      }\n\n      this.$el.scrollTop += offset\n    },\n  },\n\n  beforeCreate () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n    this.$_events = mitt()\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  unmounted () {\n    this.$_events.all.clear()\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$_events.emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = false) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.sizes = {}\n      }\n      this.$_events.emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","<script>\nimport { h } from 'vue'\n\nexport default {\n  name: 'DynamicScrollerItem',\n\n  inject: [\n    'vscrollData',\n    'vscrollParent',\n    'vscrollResizeObserver',\n  ],\n\n  props: {\n    // eslint-disable-next-line vue/require-prop-types\n    item: {\n      required: true,\n    },\n\n    watchData: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Indicates if the view is actively used to display an item.\n     */\n    active: {\n      type: Boolean,\n      required: true,\n    },\n\n    index: {\n      type: Number,\n      default: undefined,\n    },\n\n    sizeDependencies: {\n      type: [Array, Object],\n      default: null,\n    },\n\n    emitResize: {\n      type: Boolean,\n      default: false,\n    },\n\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  emits: [\n    'resize',\n  ],\n\n  computed: {\n    id () {\n      if (this.vscrollData.simpleArray) return this.index\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.vscrollData.keyField in this.item) return this.item[this.vscrollData.keyField]\n      throw new Error(`keyField '${this.vscrollData.keyField}' not found in your item. You should set a valid keyField prop on your Scroller`)\n    },\n\n    size () {\n      return this.vscrollData.sizes[this.id] || 0\n    },\n\n    finalActive () {\n      return this.active && this.vscrollData.active\n    },\n  },\n\n  watch: {\n    watchData: 'updateWatchData',\n\n    id (value, oldValue) {\n      this.$el.$_vs_id = this.id\n      if (!this.size) {\n        this.onDataUpdate()\n      }\n\n      if (this.$_sizeObserved) {\n        // In case the old item had the same size, it won't trigger the ResizeObserver\n        // since we are reusing the same DOM node\n        const oldSize = this.vscrollData.sizes[oldValue]\n        const size = this.vscrollData.sizes[value]\n        if (oldSize != null && oldSize !== size) {\n          this.applySize(oldSize)\n        }\n      }\n    },\n\n    finalActive (value) {\n      if (!this.size) {\n        if (value) {\n          if (!this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes++\n            this.vscrollParent.$_undefinedMap[this.id] = true\n          }\n        } else {\n          if (this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes--\n            this.vscrollParent.$_undefinedMap[this.id] = false\n          }\n        }\n      }\n\n      if (this.vscrollResizeObserver) {\n        if (value) {\n          this.observeSize()\n        } else {\n          this.unobserveSize()\n        }\n      } else if (value && this.$_pendingVScrollUpdate === this.id) {\n        this.updateSize()\n      }\n    },\n  },\n\n  created () {\n    if (this.$isServer) return\n\n    this.$_forceNextVScrollUpdate = null\n    this.updateWatchData()\n\n    if (!this.vscrollResizeObserver) {\n      for (const k in this.sizeDependencies) {\n        this.$watch(() => this.sizeDependencies[k], this.onDataUpdate)\n      }\n\n      this.vscrollParent.$_events.on('vscroll:update', this.onVscrollUpdate)\n    }\n  },\n\n  mounted () {\n    if (this.finalActive) {\n      this.updateSize()\n      this.observeSize()\n    }\n  },\n\n  beforeUnmount () {\n    this.vscrollParent.$_events.off('vscroll:update', this.onVscrollUpdate)\n    this.unobserveSize()\n  },\n\n  methods: {\n    updateSize () {\n      if (this.finalActive) {\n        if (this.$_pendingSizeUpdate !== this.id) {\n          this.$_pendingSizeUpdate = this.id\n          this.$_forceNextVScrollUpdate = null\n          this.$_pendingVScrollUpdate = null\n          this.computeSize(this.id)\n        }\n      } else {\n        this.$_forceNextVScrollUpdate = this.id\n      }\n    },\n\n    updateWatchData () {\n      if (this.watchData && !this.vscrollResizeObserver) {\n        this.$_watchData = this.$watch('item', () => {\n          this.onDataUpdate()\n        }, {\n          deep: true,\n        })\n      } else if (this.$_watchData) {\n        this.$_watchData()\n        this.$_watchData = null\n      }\n    },\n\n    onVscrollUpdate ({ force }) {\n      // If not active, sechedule a size update when it becomes active\n      if (!this.finalActive && force) {\n        this.$_pendingVScrollUpdate = this.id\n      }\n\n      if (this.$_forceNextVScrollUpdate === this.id || force || !this.size) {\n        this.updateSize()\n      }\n    },\n\n    onDataUpdate () {\n      this.updateSize()\n    },\n\n    computeSize (id) {\n      this.$nextTick(() => {\n        if (this.id === id) {\n          const width = this.$el.offsetWidth\n          const height = this.$el.offsetHeight\n          this.applyWidthHeight(width, height)\n        }\n        this.$_pendingSizeUpdate = null\n      })\n    },\n\n    applyWidthHeight (width, height) {\n      const size = ~~(this.vscrollParent.direction === 'vertical' ? height : width)\n      if (size && this.size !== size) {\n        this.applySize(size)\n      }\n    },\n\n    applySize (size) {\n      if (this.vscrollParent.$_undefinedMap[this.id]) {\n        this.vscrollParent.$_undefinedSizes--\n        this.vscrollParent.$_undefinedMap[this.id] = undefined\n      }\n      this.vscrollData.sizes[this.id] = size\n      if (this.emitResize) this.$emit('resize', this.id)\n    },\n\n    observeSize () {\n      if (!this.vscrollResizeObserver) return\n      if (this.$_sizeObserved) return\n      this.vscrollResizeObserver.observe(this.$el)\n      this.$el.$_vs_id = this.id\n      this.$el.$_vs_onResize = this.onResize\n      this.$_sizeObserved = true\n    },\n\n    unobserveSize () {\n      if (!this.vscrollResizeObserver) return\n      if (!this.$_sizeObserved) return\n      this.vscrollResizeObserver.unobserve(this.$el)\n      this.$el.$_vs_onResize = undefined\n      this.$_sizeObserved = false\n    },\n\n    onResize (id, width, height) {\n      if (this.id === id) {\n        this.applyWidthHeight(width, height)\n      }\n    },\n  },\n\n  render () {\n    return h(this.tag, this.$slots.default())\n  },\n}\n</script>\n","import config from './config'\n\nimport RecycleScroller from './components/RecycleScroller.vue'\nimport DynamicScroller from './components/DynamicScroller.vue'\nimport DynamicScrollerItem from './components/DynamicScrollerItem.vue'\n\nexport { default as IdState } from './mixins/IdState'\n\nexport {\n  RecycleScroller,\n  DynamicScroller,\n  DynamicScrollerItem,\n}\n\nfunction registerComponents (app, prefix) {\n  app.component(`${prefix}recycle-scroller`, RecycleScroller)\n  app.component(`${prefix}RecycleScroller`, RecycleScroller)\n  app.component(`${prefix}dynamic-scroller`, DynamicScroller)\n  app.component(`${prefix}DynamicScroller`, DynamicScroller)\n  app.component(`${prefix}dynamic-scroller-item`, DynamicScrollerItem)\n  app.component(`${prefix}DynamicScrollerItem`, DynamicScrollerItem)\n}\n\nconst plugin = {\n  // eslint-disable-next-line no-undef\n  version: VERSION,\n  install (app, options) {\n    const finalOptions = Object.assign({}, {\n      installComponents: true,\n      componentsPrefix: '',\n    }, options)\n\n    for (const key in finalOptions) {\n      if (typeof finalOptions[key] !== 'undefined') {\n        config[key] = finalOptions[key]\n      }\n    }\n\n    if (finalOptions.installComponents) {\n      registerComponents(app, finalOptions.componentsPrefix)\n    }\n  },\n}\n\nexport default plugin\n","import { reactive } from 'vue'\n\nexport default function ({\n  idProp = vm => vm.item.id,\n} = {}) {\n  const store = reactive({})\n\n  // @vue/component\n  return {\n    data () {\n      return {\n        idState: null,\n      }\n    },\n\n    created () {\n      this.$_id = null\n      if (typeof idProp === 'function') {\n        this.$_getId = () => idProp.call(this, this)\n      } else {\n        this.$_getId = () => this[idProp]\n      }\n      this.$watch(this.$_getId, {\n        handler (value) {\n          this.$nextTick(() => {\n            this.$_id = value\n          })\n        },\n        immediate: true,\n      })\n      this.$_updateIdState()\n    },\n\n    beforeUpdate () {\n      this.$_updateIdState()\n    },\n\n    methods: {\n      /**\n       * Initialize an idState\n       * @param {number|string} id Unique id for the data\n       */\n      $_idStateInit (id) {\n        const factory = this.$options.idState\n        if (typeof factory === 'function') {\n          const data = factory.call(this, this)\n          store[id] = data\n          this.$_id = id\n          return data\n        } else {\n          throw new Error('[mixin IdState] Missing `idState` function on component definition.')\n        }\n      },\n\n      /**\n       * Ensure idState is created and up-to-date\n       */\n      $_updateIdState () {\n        const id = this.$_getId()\n        if (id == null) {\n          console.warn(`No id found for IdState with idProp: '${idProp}'.`)\n        }\n        if (id !== this.$_id) {\n          if (!store[id]) {\n            this.$_idStateInit(id)\n          }\n          this.idState = store[id]\n        }\n      },\n    },\n  }\n}\n"],"names":["config","itemsLimit","isIE","initCompat","init","ua","window","navigator","userAgent","msie","indexOf","parseInt","substring","rv","edge","getInternetExplorerVersion","script","name","props","emitOnMount","type","Boolean","default","ignoreWidth","ignoreHeight","emits","[object Object]","nextTick","this","_w","$el","offsetWidth","_h","offsetHeight","emitSize","object","document","createElement","_resizeObject","setAttribute","onload","addResizeHandlers","appendChild","data","removeResizeHandlers","methods","$emit","width","height","contentDocument","defaultView","addEventListener","compareAndNotify","removeEventListener","removeChild","_withId","withScopeId","vue","pushScopeId","_hoisted_1","class","tabindex","popScopeId","render","_ctx","_cache","$props","$setup","$data","$options","openBlock","createBlock","_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_toConsumableArray","arr","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","from","_iterableToArray","o","minLen","n","toString","call","slice","test","_unsupportedIterableToArray","TypeError","_nonIterableSpread","len","arr2","__scopeId","script$3","__file","VisibilityState","el","options","vnode","instance","Constructor","_classCallCheck","observer","frozen","createObserver","protoProps","staticProps","value","_this","destroyObserver","callback","result","entry","once","throttle","_leading","throttleOptions","leading","delay","timeout","lastState","currentArgs","arguments","undefined","throttled","state","_len","args","_key","apply","concat","clearTimeout","setTimeout","_clear","oldResult","IntersectionObserver","entries","intersectingEntry","find","e","isIntersecting","intersectionRatio","threshold","intersection","observe","disconnect","get","beforeMount","_ref2","console","warn","_vue_visibilityState","unmounted","ObserveVisibility","updated","_ref3","deepEqual","val1","val2","oldValue","regex","style","node","prop","getComputedStyle","getPropertyValue","scroll","overflow","getScrollParent","HTMLElement","SVGElement","ps","parents","parentNode","scrollingElement","documentElement","items","required","keyField","String","direction","validator","includes","listTag","itemTag","simpleArray","supportsPassive","opts","uid","script$2","components","ResizeObserver","directives","itemSize","Number","gridItems","itemSecondarySize","minItemSize","sizeField","typeField","buffer","pageMode","prerender","emitUpdate","updateInterval","skipHover","listClass","itemClass","pool","totalSize","ready","hoverKey","computed","sizes","-1","accumulator","field","current","computedMinSize","l","size","$_computedMinItemSize","watch","updateVisibleItems","applyPageMode","deep","$_startIndex","$_endIndex","$_views","Map","$_unusedViews","$_scrollDirty","$_lastUpdateScrollPosition","$_prerender","error","$nextTick","lastPosition","scrollToPosition","removeListeners","index","item","nr","markRaw","id","used","view","shallowReactive","position","push","fake","unusedViews","unusedPool","set","event","$_updateTimeout","requestUpdate","requestAnimationFrame","continuous","$_refreshTimout","handleScroll","isVisible","boundingClientRect","checkItem","checkPositionDiff","count","views","itemIndexByKey","startIndex","endIndex","visibleStartIndex","visibleEndIndex","Math","min","getScroll","positionDiff","start","end","beforeSize","$refs","before","scrollHeight","after","afterSize","h","oldI","a","b","ceil","max","floor","itemsLimitError","unuseView","unusedIndex","v","Error","newlyUsedView","splice","pop","addView","delete","offset","$_sortTimer","sortViews","body","isVertical","scrollState","bounds","getBoundingClientRect","boundsSize","top","left","innerHeight","innerWidth","scrollTop","clientHeight","scrollLeft","clientWidth","addListeners","listenerTarget","getListenerTarget","passive","handleResize","viewport","scrollDirection","scrollDistance","viewportEl","tagName","scrollerPosition","log","sort","viewA","viewB","ref","_createElementBlock","$slots","_openBlock","_renderSlot","_createBlock","_resolveDynamicComponent","_normalizeStyle","normalizeStyle","_normalizeClass","_Fragment","Fragment","_renderList","_mergeProps","hover","_toHandlers","mouseenter","active","_hoisted_2","_createVNode","_component_ResizeObserver","onNotify","handleVisibilityChange","script$1","RecycleScroller","$_resizeObserver","$_vs_onResize","resizeObserverSize","borderBoxSize","$_vs_id","inlineSize","blockSize","vscrollData","vscrollParent","vscrollResizeObserver","inheritAttrs","$_undefinedMap","forceUpdate","immediate","next","prev","prevActiveTop","activeTop","$_updates","$_undefinedSizes","$_events","all","on","t","off","emit","map","clear","scroller","force","scrollToItem","$_scrollingToBottom","cb","_component_RecycleScroller","itemsWithSize","min-item-size","key-field","list-tag","item-tag","$attrs","onResize","onScrollerResize","onVisible","onScrollerVisible","itemWithSize","_normalizeProps","_guardReactiveProps","empty","inject","watchData","sizeDependencies","emitResize","tag","onDataUpdate","$_sizeObserved","oldSize","applySize","observeSize","unobserveSize","$_pendingVScrollUpdate","updateSize","$isServer","$_forceNextVScrollUpdate","updateWatchData","k","$watch","onVscrollUpdate","finalActive","$_pendingSizeUpdate","computeSize","$_watchData","applyWidthHeight","unobserve","plugin","version","VERSION","install","app","finalOptions","assign","installComponents","componentsPrefix","prefix","component","DynamicScroller","DynamicScrollerItem","registerComponents","_ref","_ref$idProp","idProp","vm","store","reactive","idState","created","$_id","$_getId","handler","_this2","$_updateIdState","beforeUpdate","$_idStateInit","factory"],"mappings":"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"}